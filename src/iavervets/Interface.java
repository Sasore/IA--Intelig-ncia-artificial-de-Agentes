/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iavervets;

import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import static java.lang.Thread.sleep;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author soare
 */
public class Interface extends javax.swing.JFrame {

    /**
     * Creates new form Interface
     */
    String[][] Ambiente = new String[50][50];
    ArrayList<String> Especie = new ArrayList<>();//Vetor que armazena especies de predadores
    ArrayList<Simbolo> Simbolos = new ArrayList<>();//Vetor de Símbolos
    ArrayList<Agente> Agentes = new ArrayList<>();//Vetor de  agentes Macacos
     ArrayList<Agente> AgentesIni = new ArrayList<>();//Vetor de  agentes Macacos
    ArrayList<Predador> Predadores = new ArrayList<>();//Vetor de predadores
    int quantidadeDeAgentes = 0;
    int quantidadeDePredadores = 0;
    int quantMaxAgentes = 10;
    int quantMaxPredadores = 10;
    int TamanhoDaVisaoAgente=15;
    boolean Jornada = false;

    public Interface() throws InterruptedException, FileNotFoundException {
        initComponents();
        this.setLocation(350, 50);//Define a posição da interface na tela do computador
        this.setVisible(true);//Exibe a interface
        //jLabel2.setText("Inicializando Sistema...");
        IncializaEspecies();
        InicializaSimbolos();
        InicializaAmbiente();
        GeraAgentes();
        Imprime(Agentes);
        GeraPredadores();
        ImprimeP(Predadores);
        System.out.println("Gerando matriz de conhecimento");
        //jTextArea1.setText("\n Gerando matriz de conhecimento"+jTextArea1.getText());
        GeraMatrizDeConhecimento();
        GeraArquivoTXT("AgenteInicial.txt");
        System.out.println("populando ambiente");
//        jTextArea1.setText(jTextArea1.getText()+"\n populando ambiente");
        PopularAmbiente();
        JornadaDosVervets();
        GeraArquivoCSV(1);
        //GeraArquivoTXT("Agente.txt");
        jTextArea1.setText("Execução finalizada \n"+jTextArea1.getText());
       // jLabel2.setText("Execução finalizada ");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vervets vc Predadores");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 0, 255), 1, true));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("jLabel2");

        jLabel3.setText("Quantidade de Ververts");

        jLabel4.setText("jLabel4");

        jLabel5.setText("Quantidade de Predadores ");

        jLabel6.setText("jLabel6");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 22, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(67, 67, 67)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Interface().setVisible(true);
                    CriaAmbiente(50, 50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            private void CriaAmbiente(int x, int y) {

            }
        });
    }

    private void IncializaEspecies() {
       
        Especie.add("Tigre");//0
        Especie.add("Cobra");//1
        Especie.add("Aguia");//2
        Especie.add("Jaguatirica");//3
        Especie.add("Onca");//4
        Especie.add("Suçuarana");//5
        Especie.add("Gavião");//6
        Especie.add("Jacaré");//7
        Especie.add("Humano");//8
        Especie.add("Leão");//9

    }

    private void GeraAgentes() {
        Random GeraAleatorio = new Random();
        quantidadeDeAgentes = GeraAleatorio.nextInt(quantMaxAgentes);
        jLabel4.setText(String.valueOf(quantidadeDeAgentes));
        for (int i = 0; i < quantidadeDeAgentes; i++) {
            Agente vervet = new Agente();
            vervet.setCodigoAgente(i, "Macaco");
            Agentes.add(vervet);
        }

    }

    private void GeraPredadores() {
        Random GeraAleatorio = new Random();
        quantidadeDePredadores = GeraAleatorio.nextInt((quantMaxPredadores));
        jLabel6.setText(String.valueOf(quantidadeDePredadores));
        int tipoPredador = 0;
        for (int i = 0; i < quantidadeDePredadores; i++) {
            Predador predador = new Predador();
            tipoPredador = GeraAleatorio.nextInt(Especie.size());
            predador.setCodigoPredador(i, Especie.get(tipoPredador));
            Predadores.add(predador);
        }
    }

    private void InicializaSimbolos() {
        for (int i = 0; i < 10; i++) {
            //Cria uma matriz do tipo:
            //                        Codigo Simbolo        
            //                          0     Tigre
            //                          1     Cobra  
            Simbolo simbolo = new Simbolo(i, Especie.get(i));
            Simbolos.add(simbolo);
        }

    }

    private void Imprime(ArrayList<Agente> Agente) {
        for (int i = 0; i < Agente.size(); i++) {
            System.out.println("Macaco: " + Agentes.get(i).getCodigoAgente() + ":: " + Agente.get(i).getEspecieAgente());
        }
    }

    private void ImprimeP(ArrayList<Predador> Predador) {
        for (int i = 0; i < Predador.size(); i++) {
            System.out.println("Predador: " + Predador.get(i).getCodigoPredador() + ":: " + Predador.get(i).getEspeciePredador());
        }
    }

    private void PopularAmbiente() {
        ArrayList<Agente> AgentesAux =new ArrayList();
        ArrayList<Predador> PredadorAux =new ArrayList();
        //copiar predadores e Agentes para vetores auxiliares
         for (int i=0;i<Agentes.size();i++) AgentesAux.add(Agentes.get(i));
         for (int i=0;i< Predadores.size();i++)  PredadorAux.add(Predadores.get(i));
        
        //Enquanto houver agentes para preencher a matriz
        Random GeraAleatorio = new Random();
        int x = 0, y = 0, cont;
        cont = (AgentesAux.size() - 1);
        while (!(AgentesAux.isEmpty())) {
            x = GeraAleatorio.nextInt(50);//gera uma linha aleatoria entre 0 e 50
            y = GeraAleatorio.nextInt(50);//gera uma coluna aleatoria entre 0 e 50
            if (Ambiente[x][y] == "0") {
                Ambiente[x][y] = AgentesAux.get(cont).NomeAgente;
                AgentesAux.remove(cont);
                cont--;
            }
        }
        cont = PredadorAux.size() - 1;
        while (!(PredadorAux.isEmpty())) {
            x = GeraAleatorio.nextInt(50);//gera uma linha aleatoria entre 0 e 50
            y = GeraAleatorio.nextInt(50);//gera uma coluna aleatoria entre 0 e 50
            if (Ambiente[x][y] == "0") {
                Ambiente[x][y] = PredadorAux.get(cont).NomePredador;
                PredadorAux.remove(cont);
                cont--;
            }
        }
    }

    private void InicializaAmbiente() {
        for (int i = 0; i < 50; i++) {
            for (int j = 0; j < 50; j++) {
                Ambiente[i][j] = "0";
            }
        }
    }

    private void GeraMatrizDeConhecimento() {
        //A combinação do vetor Simbolos , com o vetor de predadores gera uma matriz que sera adicionada a cada vervet
        ArrayList<ArrayList<Double>> S = new ArrayList<>();//Matriz de adjascencia Pesos
        ArrayList<Double> PesosPredadores = new ArrayList<>();
        Random GeraAleatorio = new Random();
        double peso = 0;
        for (int i = 0;i< Simbolos.size();i++ ) {
            for (int j = 0; j < Predadores.size(); j++) {
                peso=GeraAleatorio.nextDouble();//Gerar valores entre 0 e 1    
                PesosPredadores.add(peso);
            }
            S.add(PesosPredadores);
        }
        //Adiciona a matriz de Conhecimento S para cada Vervet
        for (int i = 0; i < Agentes.size(); i++) {
            Agentes.get(i).setSimbolos(S);
        }
        for (int i=0;i<Agentes.size();i++) AgentesIni.add(Agentes.get(i));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void JornadaDosVervets() throws InterruptedException {
        Random GeraAleatorio = new Random();
        int x = 0, y = 0;//Coordenadas
        Jornada = true;

        int cont = 0;
        int Contador=0;
        //while (Jornada) {
        while (Contador<3000) {
            jLabel2.setText("Número de Iterações: " + cont++);
            x = GeraAleatorio.nextInt(50);//gera uma Cooerdenada X aleatoria entre 0 e 50
            y = GeraAleatorio.nextInt(50);//gera uma Cooerdenada Y  aleatoria entre 0 e 50
            if (!"0".equals(Ambiente[x][y])) {//Se a celula não estiver vazia
                char letra = Ambiente[x][y].charAt(0);
                if (letra == 'M') {
                    System.out.println("Visão verver "+x +","+y);
                   // jTextArea1.setText("o Vervet "+Ambiente[x][y]+"está se sentindo ameçado! \n"+jTextArea1.getText());
                            
                    VisaoVervet(x, y, Ambiente[x][y]);
                    MovimentaAgente(x,y);
                }

            }
            Contador++;
        }
    }

    @SuppressWarnings("empty-statement")
    private void VisaoVervet(int x, int y, String Vervet) {
        //Essa função verifica o se existe algum predador no campo de visão de um vervet
        Agente agente = new Agente();
        int codigoAgente = RetornaCodigoDoAgente(Vervet);
        agente = Agentes.get(codigoAgente);//copia o objeto Agente
        int esquerda = x - TamanhoDaVisaoAgente;
        int direita = x + TamanhoDaVisaoAgente;
        int acima = y + TamanhoDaVisaoAgente;
        int abaixo = y - TamanhoDaVisaoAgente;
        Double  Alarme[] = new Double[2];//Primeira posição é o alarme, a segundo o peso
        Alarme[0] = -1.0;//Especie do predador
        Alarme[1] = -1.0;//Codigo do predador
        //impedir que receba uma coordenada fora do ambiente 
        if (esquerda <0) {
            esquerda = 0;
        }
        if (direita > 50) {
            direita = 50;
        }
        if (acima > 50) {
            acima = 50;
        }
        if (abaixo < 0) {
            abaixo = 0;
        }
        //Verificar se ha predador no raio de visão do vervet
        for (int i = esquerda; i < direita; i++) {
            for (int j = abaixo; j < acima; j++) {
                char letra = Ambiente[i][j].charAt(0);
                if (letra == 'P') {
                    int codPred = RetornaCodigoDoAgente(Ambiente[i][j]);
                    for(int k=0;k<agente.Simbolos.size();k++){
                        if(agente.Simbolos.get(k).get(codPred)>Alarme[1]){
                            Alarme[0]=Double.valueOf( k);//Codigo do alarme
                            //Alarme[1]=agente.Simbolos.get(k).get(codPred);//codigo do predador
                            Alarme[1]=Double.valueOf(codPred);//codigo do predador
                            if(Alarme[1]>(-1)){
                             //  jTextArea1.setText("O vervet "+Ambiente[i][j]+" Acaba de avistar um predador"+"\n"+jTextArea1.getText());
                            TocaAlarme(Alarme,i,j);//Passa como parâmetro a tipo de alarme e a posição do predador
                        }
                        
                        }
                    
                }
                }
            }
        }

    }

    private void TocaAlarme(Double[] Alarme, int x, int y) {
       //Por definição um vercet tem um alcance de visão de 15 quadros para cada lado 
       int CodSimbolo=Alarme[0].intValue();
       int CodPredador=Alarme[1].intValue();
       int esquerda = x - TamanhoDaVisaoAgente;
        int direita = x + TamanhoDaVisaoAgente;
        int acima = y + TamanhoDaVisaoAgente;
        int abaixo = y - TamanhoDaVisaoAgente;
        if (esquerda < 0) {
            esquerda = 0;
        }
        if (direita > 50) {
            direita = 50;
        }
        if (acima > 50) {
            acima = 50;
        }
        if (abaixo < 0) {
            abaixo = 0;
        }
        //Verifica na redondeza do alarme se existe algum Agente macaco e se esse agente avistou o  predador 
        for (int i = esquerda; i < direita; i++) {
            for (int j = abaixo; j < acima; j++) {
                char letra = Ambiente[i][j].charAt(0);
                if (letra == 'M') {
                    int codigoAgente = RetornaCodigoDoAgente(Ambiente[i][j]);
                   // jTextArea1.setText("O vervet "+Ambiente[i][j]+" Acaba der soar o Alarme"+"\n"+jTextArea1.getText());
                    AgenteVerificaPredadorNaRedondeza(codigoAgente,CodSimbolo,CodPredador,i,j);
                    
                }}
      //  JOptionPane.showMessageDialog(null,"Predador encontrado: "+Ambiente[x][y]);
       /* 
        try {
            sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        */
    }

}

    

    private int RetornaCodigoDoAgente(String Agente) {
        String aux=Agente.substring (1, Agente.length());//Retira a palavra M da String
         int codigo=Integer.valueOf(aux);//Pega o numero do Agente
         return codigo;   
    }

    private void AgenteVerificaPredadorNaRedondeza(int codigoAgente, int s, int Predador,int x,int y) {
     //Essa função verifica o se existe algum predador no campo de visão de um vervet quando o alarme for tocado
     // X e Y é a localização do Agente atual no ambiente
      
      Double aux;
      int esquerda = x - TamanhoDaVisaoAgente;
        int direita = x + TamanhoDaVisaoAgente;
        int acima = y + TamanhoDaVisaoAgente;
        int abaixo = y - TamanhoDaVisaoAgente;
        if (esquerda <0) {
            esquerda = 0;
        }
        if (direita > 50) {
            direita = 50;
        }
        if (acima > 50) {
            acima = 50;
        }
        if (abaixo < 0) {
            abaixo = 0;
        }
         for (int i = esquerda; i < direita; i++) {
            for (int j = abaixo; j < acima; j++) {
                String p="P"+String.valueOf(Predador);
                if(Ambiente[i][j].equals(p)){//Se o predador SxPx foi avistador
                   aux= Agentes.get(codigoAgente).Simbolos.get(s).get(Predador);
                   aux+=0.1;
                  // jTextArea1.setText("Aumentando aprendizado do Ververt M"+codigoAgente+" Sobre o predador "+Predador+"\n"+jTextArea1.getText());
                   Agentes.get(codigoAgente).Simbolos.get(s).set(Predador, aux);
                    
                }
                
                }
                }
    }

    
    private void MovimentaAgente(int x, int y) {
        //Esta função move o agente de lugar uma casa para cima,baixo,direita ou esquerda
        int i=x, j=y;
        boolean Movimentou=false;
        
        if(Movimentou==false){
            j++;
        if(((i>=0)&&(i<50))&&((j>=0)&&(j<50))){
        if(Ambiente[i][j].equals("0")){
            Ambiente[i][j]=Ambiente[x][y];
            Ambiente[x][y]="0";
           // jTextArea1.setText("Deslocando o Ververt"+Ambiente[x][y]+" pelo ambiente \n"+jTextArea1.getText());
            Movimentou=true;
        }
        }
        }else
            if(Movimentou==false){
            i++;
            if(((i>=0)&&(i<=50))&&((j>=0)&&(j<=50)))
            if(Ambiente[i][j].equals("0")){
            Ambiente[i][j]=Ambiente[x][y];
            Ambiente[x][y]="0";
          //  jTextArea1.setText("Deslocando o Ververt"+Ambiente[x][y]+" pelo ambiente \n"+jTextArea1.getText());
            Movimentou=true;
            }}
    else
     if(Movimentou==false){
             i++;j++;   
            if(((i>=0)&&(i<=50))&&(j>=0)&&(j<=50))
            if(Ambiente[i][j].equals("0")){
            Ambiente[i][j]=Ambiente[x][y];
            Ambiente[x][y]="0";
           // jTextArea1.setText("Deslocando o Ververt"+Ambiente[x][y]+" pelo ambiente \n"+jTextArea1.getText());
            Movimentou=true;
        }}
        else
             if(Movimentou==false){   
                i--;j--;
            if(((i>=0)&&(i<=50))&&(j>=0)&&(j<=50))
            if(Ambiente[i][j].equals("0")){
            Ambiente[i][j]=Ambiente[x][y];
            Ambiente[x][y]="0";
           // jTextArea1.setText("Deslocando o Ververt"+Ambiente[x][y]+" pelo ambiente \n"+jTextArea1.getText());
            Movimentou=true;
        }
             }
        else
                 if(Movimentou==false){
               i--; 
            if(((i>=0)&&(i<=50))&&(j>=0)&&(j<=50))
            if(Ambiente[i][j].equals("0")){
            Ambiente[i][j]=Ambiente[x][y];
            Ambiente[x][y]="0";
           // jTextArea1.setText("Deslocando o Ververt"+Ambiente[x][y]+" pelo ambiente \n"+jTextArea1.getText());
            Movimentou=true;
        }
                 }
        else
                     if(Movimentou==false){
                j--;
             if(((i>=0)&&(i<=50))&&(j>=0)&&(j<=50))
            if(Ambiente[i][j].equals("0")){
            Ambiente[i][j]=Ambiente[x][y];
            Ambiente[x][y]="0";
           // jTextArea1.setText("Deslocando o Ververt"+Ambiente[x][y]+" pelo ambiente \n"+jTextArea1.getText());
            Movimentou=true;
            }
    }}
    
//    private void GeraArquivoCSV() throws IOException {;
//    FileWriter writer = null;
//        DecimalFormat df = new DecimalFormat("0.##");
//        Double custo=0.00;
//           try {
//            String nomeDoArquivo = "AgenteSimbolo.csv";
//            writer = new FileWriter(nomeDoArquivo);
//            int QtdePredador = 50;
//                    if (Agentes.get(0).Simbolos.get(0).size() < QtdePredador) {
//                        QtdePredador = Agentes.get(0).Simbolos.get(0).size();
//                    }
//                   for (int i = 0; i < Agentes.size(); i++) {//Quantidade de agentes
//        for (int k = 0; k < QtdePredador; k++) {
//            writer.append("["+i+"]["+k+"]"+Agentes.get(i).NomeAgente+" "+Agentes.get(i).Simbolos.get(1).get(k).toString());
//        }
//    }
//    }
//            catch (IOException ex) {
//            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
//        } finally {
//            try {
//                writer.close();
//            } catch (IOException ex) {
//                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//    }
    
    private void GeraArquivoCSV(int index) {
        FileWriter writer = null;
        DecimalFormat df = new DecimalFormat("0.##");
        Double custo=0.00;
        try {
            String nomeDoArquivo = "";
            //index=1 Array de Agentes
            //index=2 Array de Predadores
            //index=3 Array de Simbolos
            //index=4 Array de Conhecimento
            //index=1 Array de AgentesIni
             for(int s=0;s<Simbolos.size();s++){
                int Simbolo=2;
                 nomeDoArquivo = "Simbolo"+Simbolo+".csv";
            
            writer = new FileWriter(nomeDoArquivo);
            
                    int QtdePredador = quantidadeDePredadores;
                    //if (Agentes.get(0).Simbolos.get(0).size() < QtdePredador) {
                      //  QtdePredador = Agentes.get(0).Simbolos.get(0).size();
                    //}
                    System.out.println("Gravando conhecimento gerado");
                    // jTextArea1.setText("Criando arquivo do excel.\n"+jTextArea1.getText());
                    for (int i = 0; i < Agentes.size(); i++) {//Quantidade de agentes
                        writer.append(Agentes.get(i).NomeAgente);
                        writer.append(';');
                        //for(int j=0;j<Agentes.get(i).Simbolos.size();j++){
                        //Quantidade de predadores
                        for (int k = 0; k < QtdePredador; k++) {
                            System.out.println("[" + i + "]" + "[" + 0 + "]" + Agentes.get(i).NomeAgente + " " + Agentes.get(i).Simbolos.get(Simbolo).get(k).toString());
                            custo=Agentes.get(i).Simbolos.get(Simbolo).get(k);
                            writer.append(df.format(custo));
                            //writer.append(Agentes.get(i).Simbolos.get(0).get(k).toString());
                            writer.append(';');
                            //}
                        }
                        writer.append('\n');
                    }

                    //            }
                    //generate whatever data you want
                    writer.flush();
                    writer.close();
            

            }
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void GeraArquivoTXT(String Arquivo) throws FileNotFoundException {
    String nomeDoArquivo = "Agente.txt";
    PrintWriter gravarArq = new PrintWriter(Arquivo);
    int QtdePredador = Agentes.get(0).Simbolos.get(0).size();
    for (int i = 0; i < Agentes.size(); i++) {//Quantidade de agentes
        for (int k = 0; k < QtdePredador; k++) {
            gravarArq.println("["+i+"]["+k+"]"+Agentes.get(i).NomeAgente+" "+Agentes.get(i).Simbolos.get(1).get(k).toString());
        }
    }
    gravarArq.close();
    nomeDoArquivo = "AgenteAux.txt";
    QtdePredador = AgentesIni.get(0).Simbolos.get(0).size();
    gravarArq = new PrintWriter(nomeDoArquivo);
    for (int i = 0; i < AgentesIni.size(); i++) {//Quantidade de agentes
        for (int k = 0; k < QtdePredador; k++) {
            gravarArq.println("["+i+"][1]["+k+"]"+AgentesIni.get(i).NomeAgente+" "+AgentesIni.get(i).Simbolos.get(1).get(k).toString());
        }}
   gravarArq.close();
    }
    
    
}
